<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[LRU Cache]]></title>
    <url>%2F2019%2F07%2FLRUCache%2F</url>
    <content type="text"><![CDATA[LeetCode题目：LRU缓存机制(LRU Cache) 个人leetcode做题记录 方法一实现一个增删改查时间复杂度都为O(1)的队列；用双向链表存储缓存，实现对缓存的增删改；用Map记录缓存，实现对缓存的查。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990public class LRUCache &#123; //双向链表(doubly-linked list) private class DNode &#123; int key; int value; DNode prev; DNode next; DNode(int key, int value) &#123; this.key = key; this.value = value; &#125; &#125; private DNode head; private DNode tail; private final int capacity; private Map&lt;Integer, DNode&gt; cacheMap; public LRUCache(int capacity) &#123; this.capacity = capacity; //指定容量 防止rehash this.cacheMap = new HashMap&lt;&gt;(capacity * 4 / 3 + 1); &#125; public int get(int key) &#123; int value = -1; if (this.cacheMap.containsKey(key)) &#123; value = this.cacheMap.get(key).value; //更新使用过的缓存 this.updateCache(key, value); &#125; return value; &#125; public void put(int key, int value) &#123; if (this.cacheMap.containsKey(key)) &#123; this.updateCache(key, value); &#125; else &#123; this.addCache(key, value); &#125; &#125; private void addCache(int key, int value) &#123; DNode cache = new DNode(key, value); int size = this.cacheMap.size(); if (size == 0) &#123;//缓存为空 this.head = cache; this.tail = cache; &#125; else &#123;//缓存不为空 this.tail.next = cache; cache.prev = this.tail; this.tail = cache; if (size == this.capacity) &#123;//缓存已满 this.cacheMap.remove(this.head.key); this.head = this.head.next; this.head.prev.next = null; this.head.prev = null; &#125; &#125; this.cacheMap.put(key, cache); &#125; private void updateCache(int key, int value) &#123; DNode cache = this.cacheMap.get(key); cache.value = value; if (cache == this.tail) &#123;//缓存在尾部 return; &#125; if (cache == this.head) &#123;//缓存在头部且非尾部 //从链表取出 this.head = this.head.next; this.head.prev = null; cache.next = null; //放入尾部 this.tail.next = cache; cache.prev = this.tail; this.tail = cache; &#125; else &#123;//缓存在非头部且非尾部 //从链表取出 cache.prev.next = cache.next; cache.next.prev = cache.prev; cache.next = null; //放入尾部 this.tail.next = cache; cache.prev = this.tail; this.tail = cache; &#125; &#125;&#125; 方法二LinkedHashMap类实现了Map接口，内部维护了一个双向链表，具有可预知的迭代顺序(默认为插入顺序)。 1234567891011121314151617181920212223public class LRUCache extends LinkedHashMap&lt;Integer, Integer&gt; &#123; private final int CAPACITY; public LRUCache(int capacity) &#123; //accessOrder: true-访问顺序, false-插入顺序 super(capacity * 4 / 3 + 1, 0.75f, true); CAPACITY = capacity; &#125; //每次添加新条目时自动删除最旧的条目 @Override protected boolean removeEldestEntry(Map.Entry&lt;Integer, Integer&gt; eldest) &#123; return size() &gt; CAPACITY; &#125; public int get(int key) &#123; return getOrDefault(key, -1); &#125; public void set(int key, int value) &#123; put(key, value); &#125;&#125;]]></content>
      <categories>
        <category>-leetcode</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[日语动词]]></title>
    <url>%2F2019%2F06%2Fjapanese-verb%2F</url>
    <content type="text"><![CDATA[日语动词分类及变化基础 五十音あ段：あかさたなはまやらわい段：いきしちにひみ りう段：うくすつぬふむゆるえ段：えけせてねへめ れお段：おこそとのほもよろを 动词分类一类动词(五段动词)う段结尾二类动词(一段动词)る结尾，倒数第二个为い段或え段小部分动词符合该规律但实为一类动词，如 帰る、限る、握る 等三类动词(サ变动词、カ变动词)サ变：する、词干+するカ变：来る(くる) 动词变形基本形/原形/辞书形略 ます形一类：う段 → い段 + ます二类：る → ます三类：する → します、来る → きます て形一类：うつる → って、く/ぐ → いて/いで、ぬぶむ → んで、す → して；特殊：行く → 行って二类：る → て三类：する → して、来る → きて た形参考て形，て/で → た/だ ない形一类：う段 → あ段(う → わ) + ない二类：る → ない三类：する → しない，来る → こない 命令形一类：う段 → え段二类：る → ろ三类：する → しろ、来る → こい 意志形一类：う段 → お段长音二类：る → よう三类：する → しよう、来る → きよう ば形一类：う段 → え段 + ば二类：る → れば三类：する → すれば、来る → くれば 可能形一类：う段 → え段 + る二类：る → られる三类：する → できる、来る → こられる 被动形一类：う段 → あ段(う → わ) + れる二类：る → られる三类：する → される、来る → こられる 使役形一类：う段 → あ段(う → わ) + せる二类：る → させる三类：する → させる、来る → こさせる 使役被动形一类：う段 → あ段(う → わ) + される二类：る → させられる三类：する → させられる、来る → こさせられる 示例]]></content>
      <categories>
        <category>-日语</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[日语数字、日期读法]]></title>
    <url>%2F2019%2F06%2Fnumber%26date%2F</url>
    <content type="text"><![CDATA[自学过程中的一些笔记整理 数字0 れい/ぜろ 1 いち 2 に 3 さん 4 し/よん 5 ご 6 ろく 7 しち/なな 8 はち 9 く/きゅう 10 じゅう 11 じゅういち 12 じゅうに 13 じゅうさん 14 じゅうし/じゅうよん 15 じゅうご 16 じゅうろく 17 じゅうしち/じゅうなな 18 じゅうはち 19 じゅうく/じゅうきゅう 20 にじゅう 30 さんじゅう 40 よんじゅう 50 ごじゅう 60 ろくじゅう 70 ななじゅう 80 はちじゅう 90 きゅうじゅう 100 ひゃく 200 にひゃく 300 さんびゃく 400 よんひゃく 500 ごひゃく 600 ろっぴゃく 700 ななひゃく 800 はっぴゃく 900 きゅうひゃく 1000 せん 2000 にせん 3000 さんぜん 4000 よんせん 5000 ごせん 6000 ろくせん 7000 ななせん 8000 はっせん 9000 きゅうせん 0.1 れいてんいち 1/2 にぶんのいち常用量词 数数 人 回 ひとつ ひとり いっかい ふたつ ふたり にかい みっつ さんにん さんかい よっつ よにん よんかい いっつ ごにん ごかい むっつ ろくにん ろっかい ななつ しちにん ななかい やっつ はちにん はちかい ここのつ くにん きゅうかい とお じゅうにん じゅっかい 月1月 いちがつ 2月 にがつ 3月 さんがつ 4月 しがつ 5月 ごがつ 6月 ろくがつ 7月 しちがつ 8月 はちがつ 9月 くがつ 10月 じゅうがつ 11月 じゅういちがつ 12月 じゅうにがつ月(阴历)睦月 むつき 如月 きさらぎ 弥生 やよい 卯月 うづき 皐月 さつき 水無月 みなづき 文月 ふみづき 葉月 はづき 長月 ながつき 神無月 かんなづき 霜月 しもつき 師走 しわす日1日 ついたち 2日 ふつか 3日 みっか 4日 よっか 5日 いつか 6日 むいか 7日 なのか 8日 ようか 9日 ここのか 10日 とおか 11日 じゅういちにち 12日 じゅうににち 13日 じゅうさんにち 14日 じゅうよっか 15日 じゅうごにち 16日 じゅうろくにち 17日 じゅうしちにち 18日 じゅうはちにち 19日 じゅうくにち 20日 はつか时分秒 时 分 秒 1時(いちじ) 1分(いっぷん) 1秒(いちびょう) 2時(にじ) 2分(にふん) 2秒(にびょう) 3時(さんじ) 3分(さんぷん) 3秒(さんびょう) 4時(よじ) 4分(よんぷん) 4秒(よんびょう) 5時(ごじ) 5分(ごふん) 5秒(ごびょう) 6時(ろくじ) 6分(ろっぷん) 6秒(ろくびょう) 7時(しちじ) 7分(ななふん) 7秒(ななびょう) 8時(はちじ) 8分(はっぷん) 8秒(はちびょう) 9時(くじ) 9分(きゅうふん) 9秒(きゅうびょう) 10時(じゅうじ) 10分(じゅっぷん) 10秒(じゅうびょう) 其他前年(ぜんねん)/一昨年(おととし) 去年(きょねん)/昨年(さくねん) 今年(ことし) 明年(みょうねん)/来年(らいねん) 後年(こうねん)/再来年(さらいねん) 先々月(せんせんげつ) 先月(せんげつ) 今月(こんげつ) 来月(らいげつ) 再来月(さらいげつ) 先々週(せんせんしゅう) 先週(せんしゅう) 今週(こんしゅう) 来週(らいしゅう) 再来週(さらいしゅう) 一昨日(おととい) 昨日(きのう) 今日(きょう) 明日(あした/みょうにち) 明後日(あさって)]]></content>
      <categories>
        <category>-日语</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F06%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
